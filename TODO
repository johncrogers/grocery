FEATURES:
  ARCHITECTURE:
    repo:
      ☐ custom linting
    app:
      ☐ Sample data service
        Accessable from frontend. Makes db samples available for development.
      Request API module/s
      Data model
      Admin Application
    server:
      ☐ Implement Passport
        API router module/s
    db

  USERS:
    PURPOSE: Allow multiple users to build lists.
    current
      VIEW
        Create front end model representations.
        Create app splash
        Create login / signup form.
      CONTROLLER
        Client
          Requests
        Server
          Routing
      MODEL
        Sample seeds.
        Tables / models / schemas / tasks / commands
    stretch
      user groups
      Encrypt passwords
      uuids
      authentication middleware

  LIST:
    PURPOSE: Organize shopping for ingredients.
    current:
      ☐ Create user.
        ☐ Seeds
        ☐ Build Table: users
        ☐ Build Views:
          ☐ Login:
            ☐ Model: users
              ☐ read
            ☐ GET /api/users
            ☐ Form view
          ☐ Signup:
            ☐ Model: users
              ☐ create
              ☐ create default shopping lists
            ☐ POST /api/users
            ☐ Formview
        ☐ Shopping list:
          ✔ Seeds @done(18-09-19 11:52)
          ✔ Build Table: shoppinglists @done(18-09-19 11:50)
          ☐ Build Views:
            ☐ Model: shoppinglists
              ☐ create
              Hit this route on user generation. Create "cart" and "list". These will be the generic lists for start. Don't need more yet because we're leaning on ealisy being able to clear and fill one cart by groups of data (meals) rather than making a ton of lists that get unorganized.
            ☐ POST /api/shoppinglists
            ☐ Lists list view:
              ☐ Model: shoppinglists
                ☐ read
              ☐ GET /api/shoppinglists
              ☐ shopping list list view
              ☐ Model: shoppinglists
                ☐ delete
                Use this route to empty cart.
              ☐ DELETE /api/shoppinglists
              ☐ Delete list button
              ☐ Model: shoppinglists
                ☐ update
              ☐ UPDATE /api/shoppinglists
              ☐ Form inputs / Save button:
                ☐ Break out rows of list into individual form components
                  They can make individual calls to CRUD.
          ☐ Populate list:
            ☐ Build Table: ingredients_shoppinglists
            ☐ Build Views:
              ☐ Model: ingredients_shoppinglists
                ☐ create
              ☐ POST /api/ingredients_shoppinglists
              ☐ Add to List button
              ☐ Model: ingredients_shoppinglists
                ☐ read
              ☐ GET /api/cart
              ☐ Cart View:
                ☐ List view
                ☐ List selector
      ingredients_shoppinglists schema update
      table manipulation scripts
        Move logging to taskrunner scripts
        Return promises as properties of module
      Create front end model representations.
      Determine views
      Color code departments
    stretch:
      Volume of ingredient to buy.

  MENU:
    PURPOSE: Build dish / meal recipes.
    current
      Dishes
        Ingredient
          Volume
          Prep notes
    stretch
      Recipe
        Cooking instructions
        Cooking planner

  PREP:
    PURPOSE: Help organize cooking effort.
    current
      Search by ingredient to see relevant recipe.
    stretch
      Dishes
      Ingredients

  PLAN:
    PURPOSE: Build meal plans and populate shopping cart.
    current:
    stretch:




NOTES:
  Skip button
    Make "cart".
      Items I've found and will buy.
      Different from Shopping List.
    Removes item from shopping list || cart
  Move ingredient db request to service

  BROKEN
    REPO
      Include a README for getting the repo setup.
      Modularize the env variables.

  IMPROVE
    Update server logging
      Indicate volume of rows affected.
      Modularize server messaging system.